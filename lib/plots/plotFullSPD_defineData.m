function fields = plotFullSPD_defineData(h, colorim, photom, radiom, photorecep, options, analysisOptions)
        
    colorimNames = fieldnames(colorim);

    %% colorimetric values, 
    % easy to do automatically as all the values
    % in this structure are updated to the graph
    for i = 1 :  h.noOfColorimValues            
        fields.colorim_text{i}  = colorimNames{i};
        fields.colorim_numer(i) = getfield(colorim, colorimNames{i});          


        % CCT fields are the only ones at the moment which have some unit
        if ~isempty(strfind(fields.colorim_text{i}, 'CCT'))
            fields.colorim_units{i} = 'K';                
        else
            fields.colorim_units{i} = '';
        end

        % define the numerical precision
        if ~isempty(strfind(fields.colorim_text{i}, 'x')) || ...
           ~isempty(strfind(fields.colorim_text{i}, 'y')) || ...
           ~isempty(strfind(fields.colorim_text{i}, 'z')) || ...
           ~isempty(strfind(fields.colorim_text{i}, 'u')) || ...
           ~isempty(strfind(fields.colorim_text{i}, 'v')) || ...
           ~isempty(strfind(fields.colorim_text{i}, 'FSI'))

            numPrec = '%1.2f';                        

        elseif ~isempty(strfind(fields.colorim_text{i}, 'CRI')) || ...
               ~isempty(strfind(fields.colorim_text{i}, 'GA')) || ...
               ~isempty(strfind(fields.colorim_text{i}, 'CCT')) || ...
               ~isempty(strfind(fields.colorim_text{i}, 'FSCI'))

            numPrec = '%3.0f';

        elseif ~isempty(strfind(fields.colorim_text{i}, 'X')) || ...
               ~isempty(strfind(fields.colorim_text{i}, 'Y')) || ...
               ~isempty(strfind(fields.colorim_text{i}, 'Z'))
            numPrec = '%10.2e';

        else
            numPrec = '%1.2f';
        end

        % convert the numerical value into a string with
        % custom-precision
        fields.colorim_numerStr{i} = num2str(fields.colorim_numer(i), numPrec);

    end        


    %% photometric/radiometric values
    fields.phoRad_text  = {'Irradiance';...
                          'Photon flux';...
                          'Illuminance Phot.';...
                          'Illuminance Scot.';...
                          'S/P Ratio';...
                          'Efficacy';...
                          'Efficacy norm.'};

    fields.phoRad_numer = [radiom.irradiance;...
                           radiom.photonDensityScalar;...
                           photom.illuminancePhot;...
                           photom.illuminanceScot;...
                           photom.ratioSP;...
                           photom.lumEff;...
                           photom.lumEffNorm];

    fields.phoRad_units = {'W/cm^2';...
                          'photons*cm^-^2*s^-^1';...
                          'lux';...
                          'lux';...
                          ' ';...
                          'lm/W';...
                          '"lm/W"'};

        % convert the numerical value into a string with
        % custom-precision
        for i = 1 : h.noOfPhoRadValues

            if ~isempty(strfind(fields.phoRad_text{i}, 'Irradiance'))
                numPrec = '%10.1e';                            

            elseif ~isempty(strfind(fields.phoRad_text{i}, 'Illuminance Phot.')) || ...
                   ~isempty(strfind(fields.phoRad_text{i}, 'Illuminance Scot.'))
                numPrec = '%10.1e'; % '%2.0f';                        

            elseif ~isempty(strfind(fields.phoRad_text{i}, 'Efficacy')) || ...
                   ~isempty(strfind(fields.phoRad_text{i}, 'S/P Ratio')) || ...
                   ~isempty(strfind(fields.phoRad_text{i}, 'Efficacy norm.'))
                numPrec = '%3.2f';

            elseif ~isempty(strfind(fields.phoRad_text{i}, 'Photon flux'))                    
                numPrec = '%10.1e';

            end                
            fields.phoRad_numerStr{i} = num2str(fields.phoRad_numer(i), numPrec);
        end


    %% photoreceptor values        
    fields.photorecep_text  = {'Rod';...
                              'SWS';...
                              'MWS';...
                              'LWS';...
                              'Melanopsin';...
                              'f_M_e';...
                              'k_R';...
                              'k_M';...
                              '\tau'};

    fields.photorecep_numer = [photorecep.rodResp;...
                               photorecep.coneResp.SWS;...
                               photorecep.coneResp.MWS;...
                               photorecep.coneResp.LWS;...
                               photorecep.melanopResp;...
                               photorecep.bistabResp.fMe;...
                               photorecep.bistabResp.kR;...
                               photorecep.bistabResp.kM;...
                               photorecep.bistabResp.tau];

    fields.photorecep_units = {['d=', num2str(analysisOptions.densities.rods,2), ', \lambda=', num2str(analysisOptions.rodPeak)];...
                              '';...
                              '';...
                              '';...
                              ['d=', num2str(analysisOptions.densities.melanopsin,2), ', \lambda=', num2str(analysisOptions.melanopsinPeak)];...
                              '';...
                              'x';...
                              'x';...
                              's'};       

        % convert the numerical value into a string with
        % custom-precision        
        for i = 1 : h.noOfPhotorecepValues
            fields.photorecep_numerStr{i} = num2str(fields.photorecep_numer(i), numPrec);
        end

